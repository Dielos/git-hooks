#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

patterns=()
patterns+=("^(fix|feat|refactor): \[..*\] ..*$")
patterns+=("^(chore|docs|style|perf|test|build): ..*")
patterns+=("^Merge branch ")
HEADER=`head -n1 $1`

for pattern in "${patterns[@]}"
do
  echo "pattern: $pattern"
  if [[ "$HEADER" =~ $pattern ]]; then
    exit 0
  fi
done

echo 'Bad commit message'
echo '--> For feature, fix and refactoring, commit message needs the following format:'
echo '    feat: [<Issue ID>] <description>'
echo '    fix: [<Issue ID>] <description>'
echo '    e.g. "fix: [ISSUE-1234] Beautiful fix description"'
echo '    Available keywords: fix|feat|refactor'
echo '--> For chore, docs, style, perf, tests and build commit message needs the following format'
echo '    chore: <description>'
echo '    e.g. "chore: pod install"'
echo '    Available keywords: chore|docs|style|perf|test|build'
echo '--> For merge commit, message must start with Merge branch '
echo '    e.g. "Merge branch test into develop"'
exit 1
